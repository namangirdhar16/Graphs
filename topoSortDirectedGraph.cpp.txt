#include <bits/stdc++.h>
using namespace std;

#define ll long long int

#define vi vector<int>
#define vli vector<ll>
#define vc vector<char>
#define vb vector<bool>
#define vs vector<string>
#define pii pair<int,int>
#define plili pair<ll,ll>


#define pb push_back
#define pp pop_back
#define sz(a) a.size()
#define sortv(a) sort(a.begin(),a.end())
#define sortr(a) sort(a.rbegin(), a.rend())
#define all(a) a.begin(), a.end()
#define nline "\n"
#define yes cout << "YES" << nline
#define no cout << "NO" << nline

const int mod = 1e9 + 7;
const int MOD = 1e9 + 7;
const ll inf = LLONG_MAX;
const int sz = 1e5 + 5;
const unsigned ll inff = ULLONG_MAX;


void db(pii &a){
  cerr << a.first << " " << a.second << " ";
}
ll lcm(ll a, ll b)
{
    return (a * 1LL * b)/__gcd(a,b);
}


// bool comp(pair<int,int> a, pair<int,int> b)
// {
//   return a.first > b.first;
// }

bool sq(int n)
{
  if((int)sqrt(n)*(int)sqrt(n) == n)
   return 1;
 else
  return 0;
}
 
const int N = 1e5 + 5;
vector<int> adj[4 * N];

vector<bool>visited(4 * N,0);
ll expo(ll a, ll b)
{
  if(b == 0)
    return 1;
  if(b == 1)
    return a;
  
  ll ans =  expo(a, b / 2);
  ans = ans * 1LL * ans;
  if(b & 1)
    ans *= a;
  return ans;

}

const int maxSize = 1e7 + 5;
bool isPrime[N];

void sieveOfEratosthenes(int n)
{
  
  isPrime[0] = isPrime[1] = false;
  for (ll i = 2; i * i < n; i++) {
    if (isPrime[i]) {
        for (ll j = i * i; j < n; j += i)
            isPrime[j] = false;
    }
}
}

bool checkPrime(ll n)
{
  if(n == 1)
    return false;

  for(int i = 2; i * i <= n; i++)
  {
    if(n % i == 0)
      return false;
  }
  return true;
}


bool sign(int n)
{
   return n < 0;
}
// Note: (while debugging) -> do make sure to check for n = 1 and some other smaller number
// -> check for integer overflows
// -> look for some edge cases
// -> Read constraints carefully 

// Way to Proceed: 
// if A or B -> think of brute force solution first, highly probable it will work
// else ->
// 1. DP | dfs or recursion | Observation | 
// 2. BS, greedy (Priority based) -> sets / priority queue / multiset, primes, prime sieve, bitmasks
// 3. Maths, pattern
// 4. Contribution of each element, see what matters the most and leave the rest.
// 5. Range Query (prefix sum) , two pointers, DSU.

pair<int, int> d[4] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
bool v[101][101];

bool isSafe(int x, int y, int n, int m, int mat[][101])
{
   if(x < 0 || x >= n || y < 0 || y >= m)
    return false;
   if(mat[x][y] == 0 || v[x][y])
    return false;

   return true;
}



bool comp(string &a, string &b)
{ 
  if(a.size() < b.size())
    return true;
  else if(a.size() > b.size())
    return false;

  return a < b;
}

// A function to print all prime
// factors of a given number n
void primeFactors(ll n, map<ll, ll> &mapp)
{
    // Print the number of 2s that divide n
    while (n % 2 == 0)
    {
        mapp[2]++;
        n = n/2;
    }
 
    // n must be odd at this point. So we can skip
    // one element (Note i = i +2)
    for (ll i = 3; i <= sqrt(n); i = i + 2)
    {
        // While i divides n, print i and divide n
        while (n % i == 0)
        {
            mapp[i]++;
            n = n/i;
        }
    }
 
    if (n > 2)
        mapp[n]++;
}

ll expoMod(ll a, ll b, ll m) {
    a %= m;
    ll res = 1;

    while (b > 0) {
        if (b & 1)
            res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }

    return res;
}


int countDigits(int n)
{
  int cnt = 0;
  while(n > 0)
  {
     cnt++;
     n = n / 10;
  }
  return cnt;
}

class triplet{
  public: 
  
  int x;
  int y;
  int gcd;
};

triplet extendedEuclid(int a, int b)
{ 
  
  if(b == 0)
  {
     return {1, 0, a};  
  }

  triplet sm = extendedEuclid(b, a % b);
  int x = sm.y;
  int y = sm.x - (a / b) * sm.y;
  return {x, y, sm.gcd};
}

// int mulModInv(int a, int m)
// {
//   // this forms a linear diaphontine equation as a * B + m * Q = 1
//   triplet ans = extendedEuclid(a, m);
//   return ans.x;
// }

 // a^p - a == 0 mod p 
 // a^p = a 
 // a^(p - 1) == 1
 // a ^ -1 = a ^ (p - 2)

ll mulModInv(ll a, ll m)
{
   return expoMod(a, m - 2, m);
}

const int MM = 2e5 + 5;
ll fact[MM];

void computeFact(ll mod)
{
  fact[0] = 1;
  fact[1] = 1;
  for(int i = 2; i < MM; i++)
  {
    fact[i] = (((i % mod) * 1LL *  (fact[i - 1] % mod)) % mod) % mod;
  }

}

ll nCr(ll n, ll r, ll p)
{
    // If n<r, then nCr should return 0
    if (n < r)
        return 0;
    // Base case
    if (r == 0)
        return 1;
 
    // Fill factorial array so that we
    // can find all factorial of r, n
    // and n-r
    // ll fac[n + 1];
    // fac[0] = 1;
    // for (int i = 1; i <= n; i++)
    //     fac[i] = (fac[i - 1] * i) % p;
 
    return (fact[n] * mulModInv(fact[r], p) % p
            * mulModInv(fact[n - r], p) % p)
           % p;
}



// clear thoughts --> cleaner code

struct comparator{
   bool operator()(pii &a, pii &b)
   {
     return a.second > b.second;
   }
};
int computeXOR(int n)
{
   
  // If n is a multiple of 4
  if (n % 4 == 0)
    return n;
 
  // If n%4 gives remainder 1
  if (n % 4 == 1)
    return 1;
 
  // If n%4 gives remainder 2
  if (n % 4 == 2)
    return n + 1;
 
  // If n%4 gives remainder 3
  return 0;
}
bool isSubSequence(string str1, string str2, int m, int n)
{
    int j = 0; // For index of str1 (or subsequence
 
    // Traverse str2 and str1, and
    // compare current character
    // of str2 with first unmatched char
    // of str1, if matched
    // then move ahead in str1
    for (int i = 0; i < n && j < m; i++)
        if (str1[j] == str2[i])
            j++;
 
    // If all characters of str1 were found in str2
    return (j == m);
}

const int M = 998244353;

vector<pii> dir{{-1, 0}, {0, -1}, {0, 1}, {1, 0}, {-1, 1}, {1, -1}, {1, 1}, {-1, -1}};

ll choose(int n, int r) {
  ll ans = 1;
  for(int i = 0; i < r; i++) {
     ans *= (n - i);
     ans /= (i + 1);
  }
  return ans;
}

ll mod_mul(ll a, ll b) {
  return (a % mod * b % mod) % mod;
}
ll mod_add(ll a, ll b) {
  return (a % mod + b % mod) % mod;
}
ll mod_sub(ll a, ll b) {
  return (((((a % mod - b % mod) % mod) + mod) % mod) + mod) % mod;
}

// int parent[1000], r[1000];
// void init() {
//   for(int i = 0; i < 200; i++) {
//      parent[i] = i;
//      r[i] = 0;
//   }
// }
// int find(int v) {
//     if (v == parent[v])
//         return v;
//     return parent[v] = find(parent[v]);
// }

// void union_(int a, int b) {
//     a = find(a);
//     b = find(b);
//     if (a != b) {
//         if (r[a] < r[b])
//             swap(a, b);
//         parent[b] = a;
//         if (r[a] == r[b])
//             r[a]++;
//     }
// }
map<int, vi> graph;
bool vis[100005];
void dfs(int src, vector<int> &ordering) {
  vis[src] = true;
  for(auto it: graph[src]) {
    if(!vis[it]) {
      dfs(it, ordering);
    }
  }
  ordering.pb(src);
  return;
}
void solve() {
  
   memset(vis, false, sizeof vis);
   int n, e;
   cin >> n >> e;
   for(int i = 0; i < e; i++) {
    int f, s;
    cin >> f >> s;
    graph[f].pb(s);
   }
   vector<int> ordering;
   for(int i = 1; i <= n; i++) {
     if(!vis[i]) {
       dfs(i, ordering);
     }
   }

   for(int i = ordering.size() - 1; i >= 0; i--) {
     cout << ordering[i] << " ";
   }
   cout << nline;
   

}


   
int main() {  
  
   ios_base::sync_with_stdio(false);cin.tie(NULL); 
   
   #ifndef ONLINE_JUDGE 
   freopen("input.txt", "r", stdin);  
   freopen("error.txt", "w", stderr); 
   freopen("out.txt", "w", stdout); 
   #endif 
   
  
   int t = 1;
   //cin >> t;
   int T = 1;
   computeFact(mod);
   while(t--) { 
     //cout << "Case #" << T << ": "; 
     solve();
     T++;
   }

  
   return 0;
}